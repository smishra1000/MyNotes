Microservices with Databases:

When designing microservices, each service should be independent, scalable, 
and loosely coupled. This often means each microservice manages its own database,
 but there are scenarios where multiple services might interact with the same data.
  Here, I'll explain how to design a system with microservices for
   user management, checkout, payment, and notifications using Node.js, Express,
    and MongoDB, along with concepts like transaction management, 
    the Saga pattern, CQRS, and orchestration.

1. Service Architecture:

User Service: Manages user data and authentication.
Checkout Service: Manages the shopping cart and order creation.
Payment Service: Handles payment processing.
Notification Service: Sends notifications to users.

2. Database Design:

Separate Databases for Each Service: Each microservice has its own database to 
ensure loose coupling.

User Service: usersDB
Checkout Service: ordersDB
Payment Service: paymentsDB
Notification Service: notificationsDB

No Direct Database Sharing: Services should communicate via APIs rather than 
accessing each other's databases directly.

3. Transaction Management with Saga Pattern:
The Saga pattern manages distributed transactions across microservices. 
There are two types of Sagas: Choreography and Orchestration.

Choreography: Each service publishes events and reacts to events from other 
services.

Orchestration: A central orchestrator service manages the workflow by calling 
each service in sequence.

Example: Checkout, Payment, and Notification Workflow

Choreography-Based Saga:

User Service: Creates a new user.

Checkout Service: Creates an order and publishes an OrderCreated event.

Payment Service: Listens to the OrderCreated event, processes payment, 
and publishes a PaymentProcessed event.

Notification Service: Listens to the PaymentProcessed event and sends a 
notification to the user.

// eventBUS.js
function publishEevnt(event,data){
    let em = new EventEmitter();
    em.emit(event,data)
}

// Checkout Service

import publishEevnt from "./eventbus
app.post('/checkout', async (req, res) => {
    const order = await createOrder(req.body); // Save order to ordersDB
    publishEvent('OrderCreated', order); // Publish event
    res.status(201).send(order);
});

// Payment Service
eventBus.on('OrderCreated', async (order) => {
    const payment = await processPayment(order); // Save payment to paymentsDB
    publishEvent('PaymentProcessed', payment); // Publish event
});

// Notification Service
eventBus.on('PaymentProcessed', async (payment) => {
    await sendNotification(payment.userId, 'Payment successful');
});


Orchestration-Based Saga:

Orchestrator Service: Manages the entire transaction by calling each service in 
sequence.
Rollback (Compensation): If any step fails, compensating 
 (e.g., refunding a payment) are triggered to undo previous steps.


 // Orchestrator Service
app.post('/orchestrateCheckout', async (req, res) => {
    try {
        const order = await checkoutService.createOrder(req.body);
        const payment = await paymentService.processPayment(order);
        await notificationService.sendNotification(payment.userId, 'Payment successful');
        res.status(201).send({ order, payment });
    } catch (error) {
        await paymentService.refundPayment(order.id); // Compensation logic
        res.status(500).send('Transaction failed');
    }
});


4. CQRS (Command Query Responsibility Segregation):

Commands: Handle data modification operations (e.g., creating an order).
Queries: Handle data retrieval operations (e.g., fetching order details).
Separate Data Models: One model for updates (commands) and another for reads 
(queries), optimized differently.

// Command: Create Order
app.post('/orders', async (req, res) => {
    const order = await Order.create(req.body); // Command model
    res.status(201).send(order);
});

// Query: Get Order Details
app.get('/orders/:id', async (req, res) => {
    const order = await OrderDetails.findById(req.params.id); // Query model
    res.status(200).send(order);
});


5. Event Sourcing:
Event Store: Instead of storing the current state, store a sequence of events 
that led to the current state.
Rebuild State: The current state can be reconstructed by replaying the events.

// Event Sourcing Example
eventBus.on('OrderCreated', (event) => {
    eventStore.save(event); // Save event to the event store
});

app.get('/orders/:id', async (req, res) => {
    const events = await eventStore.getEvents('Order', req.params.id);
    const order = rebuildOrderFromEvents(events); // Rebuild state
    res.status(200).send(order);
});

Distributed Transactions: Managed with the Saga pattern, either through
 choreography (event-driven) or orchestration (centralized control).

CQRS: Helps separate read and write concerns, often combined with event 
sourcing for better scalability.

Database Per Microservice: Each service manages its own data, ensuring independence
 and scalability.
This approach ensures that your microservices are scalable, fault-tolerant,
 and capable of handling complex business transactions across different 
 services while maintaining data consistency.