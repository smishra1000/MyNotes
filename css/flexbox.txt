Properties for the Parent
(flex container)

display
This defines a flex container; inline or block depending on the given value. 
It enables a flex context for all its direct children.

.container {
  display: flex; /* or inline-flex */
}

flex-direction------This establishes the main-axis, 
.container {
  flex-direction: row | row-reverse | column | column-reverse;
}

flex-wrap---By default, flex items will all try to fit onto one line. 
You can change that and allow the items to wrap as needed with this property.

.container {
  flex-wrap: nowrap | wrap | wrap-reverse;
}
nowrap (default): all flex items will be on one line
wrap: flex items will wrap onto multiple lines, from top to bottom.
wrap-reverse: flex items will wrap onto multiple lines from bottom to top.


flex-flow
This is a shorthand for the flex-direction and flex-wrap properties,
 which together define the flex container’s main and cross axes. 
 The default value is row nowrap.

.container {
  flex-flow: column wrap;
}


justify-content

This defines the alignment along the main axis. It helps distribute
 extra free space leftover when either all the flex items on a
  line are inflexible, or are flexible but have reached their maximum size

  flex-start (default): items are packed toward the start of the flex-direction.
flex-end: items are packed toward the end of the flex-direction.
start: items are packed toward the start of the writing-mode direction.
end: items are packed toward the end of the writing-mode direction.
left: items are packed toward left edge of the container, unless that doesn’t make sense with the flex-direction, then it behaves like start.
right: items are packed toward right edge of the container, unless that doesn’t make sense with the flex-direction, then it behaves like end.
center: items are centered along the line
space-between: items are evenly distributed in the line; first item is on the start line, last item on the end line
space-around: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.
space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal.



align-items

This defines the default behavior for how flex items are laid out along
 the cross axis on the current line. Think of it as the justify-content 
 version for the cross-axis (perpendicular to the main-axis).


 stretch (default): stretch to fill the container (still respect min-width/max-width)
flex-start / start / self-start: items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the flex-direction rules or the writing-mode rules.
flex-end / end / self-end: items are placed at the end of the cross axis. The difference again is subtle and is about respecting flex-direction rules vs. writing-mode rules.
center: items are centered in the cross-axis
baseline: items are aligned such as their baselines align



align-content
This aligns a flex container’s lines within when there is extra space 
in the cross-axis, similar to how justify-content aligns individual items
 within the main-axis.

 notes---------------Note: This property only takes effect on multi-line 
 flexible containers, where flex-wrap is set to either wrap or wrap-reverse).
  A single-line flexible container (i.e. where flex-wrap is set to its default
   value, no-wrap) will not reflect align-content.


   gap, row-gap, column-gap
   The gap property explicitly controls the space between flex items. It 
   applies that spacing only between items not on the outer edges.

.container {
  display: flex;
  ...
  gap: 10px;
  gap: 10px 20px; /* row-gap column gap */
  row-gap: 10px;
  column-gap: 20px;
}



Child properties :

1> flex-grow 
2>flex-basis
3>flex-shrink 
4>align-self: 

flex
This is the shorthand for flex-grow, flex-shrink and flex-basis combined. 
The second and third parameters (flex-shrink and flex-basis) are optional.
 The default is 0 1 auto, but if you set it with a single number value,
  like flex: 5;, that changes the flex-basis to 0%, so it’s like setting 
  flex-grow: 5; flex-shrink: 1; flex-basis: 0%;

align-self----This allows the default alignment (or the one specified by 
align-items) to be overridden for individual flex items  
