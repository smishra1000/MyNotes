CSS Grid Layout (aka “Grid” or “CSS Grid”), is a two-dimensional grid-based layout
we used tables, then floats, positioning and inline-block

Grid Container
The element on which display: grid is applied. It’s the direct parent of all 
the grid items. In this example container is the grid container.

<div class="container">
  <div class="item item-1"> </div>
  <div class="item item-2"> </div>
  <div class="item item-3"> </div>
</div>

<div class="container">
  <div class="item"> </div>
  <div class="item"> </div>
</div>

2>grid-template-columns property
You use this property to define the number and width of columns.
 You can either individually set the width of each column, or set a 
 uniform width for all columns using the repeat() function.
 grid-template-columns: 200px auto 100px;
 grid-template-columns: repeat(4,1fr)

.container {
  grid-template-columns: ...  ...;
  /* e.g. 
      1fr 1fr
      minmax(10px, 1fr) 3fr
      repeat(5, 1fr)
      50px auto 100px 1fr
  */
  grid-template-rows: ... ...;
  /* e.g. 
      min-content 1fr min-content
      100px 1fr max-content
  */
} 



grid-template-areas-Defines a grid template by referencing the names of the 
grid areas which are specified with the grid-area property. Repeating the 
name of a grid area causes the content to span those cells.
 A period signifies an empty cell.
 <grid-area-name> – the name of a grid area specified with grid-area
. – a period signifies an empty grid cell
none – no grid areas are defined
.container {
  grid-template-areas: 
    "<grid-area-name> | . | none | ..."
    "...";
}
exemaple--
.item-a {
  grid-area: header;
}
.item-b {
  grid-area: main;
}
.item-c {
  grid-area: sidebar;
}
.item-d {
  grid-area: footer;
}

.container {
  display: grid;
  grid-template-columns: 50px 50px 50px 50px;
  grid-template-rows: auto;
  grid-template-areas: 
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
}

grid-gap ------
.container {
  grid-template-columns: 100px 50px 100px;
  grid-template-rows: 80px auto 80px; 
  column-gap: 10px;
  row-gap: 15px;
}

Using justify-content
We use justify-content to align the whole grid inside the container.

There are a number of values we can work with:

space-evenly
space-around
space-between
center
start
end
Keep in mind that the grid width has to be less than the container width 
for the justify-content to work!

Using align-content
We use the align-content property to vertically align the whole grid inside 
the container.

Our grid height needs to be less than the container height for this property 
to work.



Using grid-template-areas
We can use grid-template-areas to define named areas & move them around inside 
the grid, and also to expand grid items across multiple rows and/or columns.

Let’s use grid-template-areas to build a typical layout with a header up top,
 a sidebar to the left of the main content, followed by a footer:

 .grid-container {
  display: grid;
  grid-template-columns: 200px 200px 200px 200px;
  grid-template-rows: 125px 225px;
  grid-template-areas:
    "header header header header"
    "sidebar main main main"
    "footer footer footer footer";
}
main {
  grid-area: main;
}
aside {
  grid-area: sidebar;
}
header {
  grid-area: header;
}
footer {
  grid-area: footer;
}
<div class="grid-container">
  <main>
    Main
  </main>
  <aside>
    Sidebar
  </aside>
  <footer>
    Footer
  </footer>
  <header>
    Header
  </header>
</div>

The justify-items property
You use this property to position grid-items (children) inside grid containers 
along the X-Axis [Main Axis].

The align-items property
You use this property to position grid-items (children) inside the grid 
container along the Y-Axis [Cross Axis].