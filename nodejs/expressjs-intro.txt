Express JS is a small framework that works on top of Node web server 
functionality to simplify its APIs and add helpful new features.
Express is a minimal and flexible Node.js web application framework that 
provides a robust set of features for web and mobile applications. 
It is an open source framework developed and maintained by the Node.js
 foundation.


 -------------------Installation and setup 

Assuming you’ve already installed Node.js, create a directory to hold 
your application, and make that your working directory
1>open terminal and create directory mkdir myapp
2>navigate to that created directory cd mapp
3>Use the npm init command to create a package.json file for your
 application
 npm init
 4>This command prompts you for a number of things, such as the name and 
 version of your application. For now, you can simply hit RETURN to 
 accept the defaults for most of them

 5>Enter app.js, or whatever you want the name of the main file to be
 . If you want it to be index.js, hit RETURN to accept the suggested 
 default file name.

6>Now install Express in the myapp directory and save it in the 
dependencies list. For example
 npm install express

 7> const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})


To make our development process a lot easier, we will install a tool 
from npm, nodemon. This tool restarts our server as soon as we make a
 change in any of our files, otherwise we need to restart the server 
 manually after each file modification. To install nodemon, use the 
 following command −

npm install -g nodemon


----------------------------How the App Works?-------------------
The first line require Express in our file, we have access to it through 
the variable Express. We use it to create an application and assign it 
to const app.

app.get(route, callback)
This function tells what to do when a get request at the given route is 
called. The callback function has 2 parameters, request(req) and 
response(res). The request object(req) represents the HTTP request 
and has properties for the request query string, parameters, body, 
HTTP headers, etc. Similarly, the response object represents the 
HTTP response that the Express app sends when it receives an HTTP 
request.

res.send()
This function takes an object as input and it sends this to the 
requesting client. Here we are sending the string "Hello World!".

app.listen(port, [host], [backlog], [callback]])
This function binds and listens for connections on the specified host 
and port. Port is the only required parameter here.

--------------------------------Routing In express--------------------
Routing refers to determining how an application responds to a client 
request to a particular endpoint, which is a URI (or path) and a 
specific HTTP request method (GET, POST, and so on).

Each route can have one or more handler functions, which are executed 
when the route is matched.

app.METHOD(PATH, HANDLER)
***************************************************************************
app is an instance of express.
METHOD is an HTTP request method, in lowercase.
PATH is a path on the server.
HANDLER is the function executed when the route is matched.

Respond with Hello World! on the homepage:

app.get('/', (req, res) => {
  res.send('Hello World!')
})
Respond to POST request on the root route (/), the application’s home page:

app.post('/', (req, res) => {
  res.send('Got a POST request')
})

Respond to a PUT request to the /user route:

app.put('/user', (req, res) => {
  res.send('Got a PUT request at /user')
})

Respond to a DELETE request to the /user route:

app.delete('/user', (req, res) => {
  res.send('Got a DELETE request at /user')
})

