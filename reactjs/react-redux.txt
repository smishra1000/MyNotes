What is Redux?
Redux is a state management library that allows you to manage the state 
of your JavaScript applications more efficiently and predictably
Redux is not limited to React and you can use it with other frameworks or
 even vanilla JavaScript.

 Why Should I Use Redux?
Redux can help simplify the state management process, especially when 
dealing with complex and interconnected components

Centralized state management: With Redux, you can maintain the state of your 
entire application in a single store, making it easier to manage and access
 data across components.

Predictable state updates: Redux has a clear flow of data, which means
 changes to the state can only happen when you create an action and send 
 it through Redux. This makes it easy to understand how your application's 
 data will change in response to user actions.

Easier debugging: With Redux DevTools, you have a clear record of all the 
changes to your application's state. This makes locating and fixing issues
 in your code easier, saving you time and effort in the debugging process.

Better performance: By minimizing the number of state updates and reducing 
the need for prop drilling, Redux helps improve your application's performance.

The key components that enable this centralized approach to state management are:

Store----Also, the store is the single source of truth for your application's 
state. This means that any component in your application can access it to 
retrieve and update data.


Actions----An action is an object that describes what changes need to be made 
to the state of your application. It sends data from your application to the 
Redux store and serves as the only way to update the store.
An action must have a "type" property describing the action being performed.
 This "type" property is typically defined as a string constant to ensure 
 consistency and avoid typos.


Dispatch---In Redux, dispatch is a function provided by the store that allows
 you to send an action to update the state of your application. When you call 
 dispatch, the store runs an action through all of the available reducers,
  which in turn update the state accordingly.




Reducers-----a reducer is a function that takes in the current state of an 
application and an action as arguments, and returns a new state based on the 
action.


example----
npm create vite@latest your-project-name -- --template react
cd your-project-name

npm install
npm install redux react-redux redux-thunk redux-devtools-extension


src/reducers/index.js 

import taskReducer from "./taskReducer";
import { combineReducers } from "redux";

const rootReducer = combineReducers({
  tasks: taskReducer,
});

export default rootReducer;


const initialState = {
  tasks: []
};

src/reducers/taskReducer.js

const taskReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'ADD_TASK':
      return {
        ...state,
        tasks: [...state.tasks, action.payload]
      };
    case 'DELETE_TASK':
      return {
        ...state,
        tasks: state.tasks.filter(task => task.id !== action.payload)
      };
    default:
      return state;
  }
};

export default taskReducer;



src/store.js 

import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import { composeWithDevTools } from "redux-devtools-extension";

import taskReducer from "./reducers/taskReducer";

const store = createStore(
  taskReducer,
  composeWithDevTools(applyMiddleware(thunk))
);

export default store;


To create the actions, create a new folder called "actions" in the src
 directory and then create a new file called index.js. This file will
  contain all of the action creators for our application.
src/actions/index.jsx 

export const addTodo = (text) => {
  return {
    type: "ADD_TASK",
    payload: {
      id: new Date().getTime(),
      text: text,
    },
  };
};

export const deleteTodo = (id) => {
  return {
    type: "DELETE_TASK",
    payload: id,
  };
};


src/main.jsx or index.jsx 

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";

import { Provider } from "react-redux";
import store from "./store";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);

we import the Provider function and the Redux store we created into our 
main.jsx. Then, we wrap our App component with the Provider function and 
pass the store as a prop. This makes the Redux store available to all the 
components inside the App.




component/Task.jsx ----------------

import { useRef } from "react";
import { useDispatch } from "react-redux";
import { addTodo } from "../actions";

const Task = () => {
  const dispatch = useDispatch();
  const inputRef = useRef(null);

  function addNewTask() {
    const task = inputRef.current.value.trim();
    if (task !== "") {
      dispatch(addTodo(task));
      inputRef.current.value = "";
    }
  }

  return (
    <div className="task-component">
      <div className="add-task">
        <input
          type="text"
          placeholder="Add task here..."
          ref={inputRef}
          className="taskInput"
        />
        <button onClick={addNewTask}>Add task</button>
      </div>
    </div>
  );
};

export default Task



component/TaskList.jsx 

import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { deleteTodo } from '../actions';

const TaskList = () => {
  const tasks = useSelector((state) => state.tasks);
  const dispatch = useDispatch();

  const handleDelete = (id) => {
    dispatch(deleteTodo(id));
  };

  return (
    <div className="tasklist">
      <div className="display-tasks">
        <h3>Your tasks:</h3>
        <ul className="tasks">
          {tasks.map((task) => (
            <li className="task" key={task.id}>
              {task.text}
              <button
                className="delete-btn"
                onClick={() => handleDelete(task.id)}
              >
                delete
              </button>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default TaskList;



//App.jsx 



import Task from "./components/Task";
import TaskList from "./components/TaskList";

function App() {
  return (
    <div className="App">
      <Task />
      <TaskList />
    </div>
  );
}

export default App;


--------------------------Redux toolkit -------------------------------------
How to set up Redux Toolkit
To use Redux Toolkit in your React application, you need to install two dependencies: @reduxjs/toolkit and react-redux.

The @reduxjs/toolkit package provides the necessary tools to simplify Redux development, while react-redux is needed to connect your Redux store to your React components.

npm install @reduxjs/toolkit react-redux

A slice is a portion of the Redux store that is responsible for managing 
a specific piece of state

To create a slice to manage our ToDo application, create a new file named 
src/features/todo/todoSlice.js and add the following code.

import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  tasks: [],
};

const todoSlice = createSlice({
  name: "todo",
  initialState,
  reducers: {
    addTodo: (state, action) => {
      state.tasks.push({ id: Date.now(), text: action.payload });
    },
    deleteTodo: (state, action) => {
      state.tasks = state.tasks.filter((task) => task.id !== action.payload);
    },
  },
});

export const { addTodo, deleteTodo } = todoSlice.actions;

export default todoSlice.reducer;

//src/store.js 

import { configureStore } from "@reduxjs/toolkit";
import todoReducer from "./features/todo/todoSlice";

const store = configureStore({
  reducer: {
    todo: todoReducer,
  },
});

export default store;


App.js 

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "./index.css";

import store from "./store.js";
import { Provider } from "react-redux";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);