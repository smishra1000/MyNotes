React’s useContext hook makes it easy to pass data throughout your app 
without manually passing props down the tree.

It makes up part of React’s Context API (the other parts being the Provider 
and Consumer components, which we’ll see examples of below).
 Context can make a nice simple alternative to Redux when your data is 
 simple or your app is small.

import React from "react";
import ReactDOM from "react-dom";

// Create a Context
const NumberContext = React.createContext();
// It returns an object with 2 values:
// { Provider, Consumer }

function App() {
  // Use the Provider to make a value available to all
  // children and grandchildren
  return (
    <NumberContext.Provider value={42}>
      <div>
        <Display />
      </div>
    </NumberContext.Provider>
  );
}

// using without useConxteHook 
function Display() {
  // Use the Consumer to grab the value from context
  // Notice this component didn't get any props!
  return (
    <NumberContext.Consumer>
      {value => <div>The answer is {value}.</div>}
    </NumberContext.Consumer>
  );
}

useContext lets you “use” context without a Consumer
Let’s rewrite the Display component with the useContext hook:

// import useContext (or we could write React.useContext)
import React, { useContext } from 'react';

// ...

function Display() {
  const value = useContext(NumberContext);
  return <div>The answer is {value}.</div>;
}