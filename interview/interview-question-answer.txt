HTML----------------------------------
1>Doctype in html ?
ans:Document type definition
2>semantics and non semantics 
ans:These elements simply mean, elements with meaning. The reason being, 
there definition in the code tells the browser and the developer what they 
are supposed to do
article aside,details,figcaption,figure,footer,form,header,main,mark,nav,table,section

3>what are meta tag ?
ans:The <meta> tag defines metadata about an HTML document. Metadata is
 data (information) about data.
<head>
<meta charset="UTF-8">
<meta name="description" content="Free Web tutorials">
<meta name="keywords" content="HTML, CSS, JavaScript">
<meta name="author" content="John Doe">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
Setting the viewport to make your website look good on all devices:

<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

4>what is char set?
charset	character_set	Specifies the character encoding for the HTML document
5>What is the CSS Box Model?
The box model in CSS is a container that contains various properties, 
including borders, margins, padding, and the content itself. 
These properties collectively determine the dimensions and spacing of an element.
ontent: The actual data in text, images, or other media forms can be sized using the width and height property.
Padding: Padding is used to create space around the element, inside any defined border.
Border: The border is used to cover the content & any padding, & also allows setting the style, color, and width of the border.
Margin: Margin is used to create space around the element ie., around the border area.

6>what is box sizing ?
ans: bordr-box content-box
Total element height = height + top padding + bottom padding + top border + bottom border
Total element width = width + left padding + right padding + left border + right border

7>css position ?
ans:There are five values the position property can take. They are:

static:This is the default value for elements. The element is positioned 
according to the normal flow of the document. The left, right, top, bottom 
and z-index properties do not affect an element with position: static.

relative:Elements with position: relative remain in the normal flow of the 
document. But, unlike static elements, the left, right, top, bottom and 
z-index properties affect the position of the element. An offset, based 
on the values of left, right, top and bottom properties, is applied to
 the element relative to itself.


absolute: position: absolute is positioned relative to its closest positioned ancestor. That means that the parent element has to have a position value other than position: static.
If the closest parent element is not positioned, it is positioned relative to the next parent element that is positioned. If there's no positioned ancestor element, it is positioned 
relative to the <html> element.

fixed: fixed but  they are always positioned relative to the <html> element.

sticky:position: sticky is a mix of position: relative and position: fixed. 
It acts like a relatively positioned element until a certain scroll point
 and then it acts like a fixed element

 8>what is media query
 ans:@media screen and (min-width: 480px) {
  body {
    background-color: lightgreen;
  }
}

JS-------------------------------------------------------------------------------------------
1>what is varibales?how to declare variables in js?
ans-In JavaScript, a variable is a container for storing data values. 
Variables can hold different types of data, such as numbers, strings, 
objects, and more. Variables allow you to store and manipulate data 
within your program

var is function-scoped or globally scoped and can be re-assigned and re-declared.
let is block-scoped and can be re-assigned but not re-declared within the same scope.
const is block-scoped and cannot be re-assigned or re-declared. It must be initialized at the time of declaration.

2>what is data types in javascript?
ans--JavaScript data types include number, string, boolean, null, undefined, object, and symbol.
Symbol: Represents a unique and immutable value, often used as object property keys.
javascript
Copy code
let uniqueID = Symbol('id');
3>what is difference between nulll and undefined ?
ans-undefined
Meaning: undefined indicates that a variable has been declared but has not yet 
been assigned a value, or it signifies that a property or array element does 
not exist.

undefined is the default value for uninitialized variables and missing properties.
null is explicitly assigned to a variable to indicate an intentional absence of value.
4>console.log(null == undefined); // true
console.log(null === undefined); // false

What is the difference between for...of and for...in loops?
5>: for...of iterates over iterable objects (arrays, strings), while for...in iterates over enumerable properties of an object.
const arr = [1, 2, 3];
for (let value of arr) {
    console.log(value);
}

const obj = { a: 1, b: 2 };
for (let key in obj) {
    console.log(key, obj[key]);
}

6>How do Object.freeze and Object.seal differ?
ans: Object.freeze makes an object immutable, while Object.seal prevents 
adding or removing properties but allows modification of existing properties.
const obj = { a: 1 };
Object.freeze(obj);
obj.a = 2; // This will not work

const obj2 = { b: 2 };
Object.seal(obj2);
obj2.b = 3; // This will work
obj2.c = 4; // This will not work

7>Explain classes and inheritance in JavaScript ES6.
ans: Classes can be created using the class keyword and inheritance is 
achieved using the extends keyword.
class Animal {
    constructor(name) {
        this.name = name;
    }
    speak() {
        console.log(`${this.name} makes a noise.`);
    }
}

class Dog extends Animal {
    speak() {
        console.log(`${this.name} barks.`);
    }
}

const d = new Dog('Rex');
d.speak(); // Rex barks.

8>What is a closure in JavaScript?
ans-A closure is a function that retains access to its lexical scope 
even when the function is executed outside that scope
function outer() {
    let count = 0;
    return function inner() {
        count++;
        console.log(count);
    };
}

const counter = outer();
counter(); // 1
counter(); // 2
9>What is hoisting in JavaScript?
console.log(a); // undefined
var a = 5;

function hoistedFunction() {
    console.log('This function is hoisted.');
}
hoistedFunction();

10>What is the difference between innerText, innerHTML, and textContent?
innerText returns the visible text content, 
innerHTML returns the HTML content, 
and textContent returns the full text content including hidden text.

11>HTMLCollection NodeList 
ans-HTMLCollection: Live collection. Automatically updates when the DOM changes.
NodeList: Can be live or static. 
querySelectorAll returns a static NodeList, while childNodes returns a live NodeList.
HTMLCollection: Accessed by methods like getElementsByTagName, getElementsByClassName,

Array-Like Properties:
HTMLCollection: Array-like but does not support array methods like forEach.
NodeList: Array-like and, if static, supports methods like forEach.
12>explain call apply bind?
ans-The call, apply, and bind methods in JavaScript are used to control the context 
(this value) of a function. They allow you to call a function with a specified 
this value and arguments. This is particularly useful when you want to borrow 
methods from one object and use them on another object.
call: Invokes the function immediately with a specified this value and arguments provided one by one.
apply: Invokes the function immediately with a specified this value and arguments provided as an array.
bind: Returns a new function with a specified this value and initial arguments, and does not invoke the function immediately.

13>what is rest and spread ?
Spread operator: The spread operator helps us expand an iterable such as an 
array where multiple arguments are needed, it also helps to expand the object 
expressions

Rest: rest parameter compresses them. It collects several elements.

14>what is prototype and chain?
ans: When a property or method is called on an object, if the object doesn’t
 contain it, the JavaScript engine will then look to the object’s prototype 
 to resolve the property or method.
 "In JavaScript, all functions have a Prototype property and all objects have a __proto__ property that points to the prototype of their constructor function.
The __proto__ property can be thought of as pointing to the prototype of the function it was created from."

15>Hoisting rule ?
ans:variable assignment takes precedence over function
function declaration takes precedence over variable declaration
(function() {
    var test = 5;
    function test() {}
    console.log('test is: ', test);
})();

16>Map and WeakMap
ans:
Map -- If we use an object as the key in a regular Map, then while the Map exists, that object exists as well. It occupies memory and may not be garbage collected.

let john = { name: "John" };
let array = [ john ];
john = null; // overwrite the reference

// john is stored inside the array, so it won't be garbage-collected
// we can get it as array[0]
Similar to that, if we use an object as the key in a regular Map, then while 
the Map exists, that object exists as well. It occupies memory and may not 
be garbage collected

let john = { name: "John" };
let map = new Map();
map.set(john, "...");
john = null; // overwrite the reference

// john is stored inside the map,
// we can get it by using map.keys()
WeakMap -- Now, if we use an object as the key in it, and there are no 
other references to that object – it will be removed from memory
 (and from the map) automatically.

let john = { name: "John" };
let weakMap = new WeakMap();
weakMap.set(john, "...");
john = null; // overwrite the reference

// john is removed from memory!


17> Object.defineProperty 
ans: The Object.defineProperty() method in JavaScript is a Standard built-in 
object which defines a new property directly on an object or it can also modify
 the existing property of an object and returns the object. 
 const geek1 = {}; 
Object.defineProperty(geek1, 'prop1', { 
    value: 65, 
    writable: false
}); 
geek1.prop1 = 7; 
console.log(geek1.prop1); 
  
const geek2 = {}; 
Object.defineProperty(geek2, 'prop2', { 
  
    value: 54, 
    value: 23, 
    value: 12 * 9, 
}); 
console.log(geek2.prop2);
Value
The value property flag is used to assign a specific value to the property being defined or modified

const obj = {};
Object.defineProperty(obj, 'exampleValue', {
  value: 'initialValue'
});
console.log(obj.exampleValue); // Output: initialValue

Writable
The writable property flag determines whether the value of the property can be 
changed using an assignment operator. If set to false, attempts to modify the 
property's value will result in an error.

const obj = {};
Object.defineProperty(obj, 'readOnlyProperty', {
  value: 'immutableValue',
  writable: false
});
obj.readOnlyProperty = 'newValue';
console.log(obj.readOnlyProperty); //immutableValue

Enumerable
The enumerable property flag controls whether the property will be included 
during enumeration of the object's properties. If set to false, the property 
will be skipped in operations like for...in and Object.keys()

const obj = {
  visibleProperty: 'visibleValue',
  hiddenProperty: 'hiddenValue',
};

Object.defineProperty(obj, 'hiddenProperty', {
  enumerable: false,
});

// Enumerate only enumerable properties
console.log(Object.keys(obj)); // Output: ['visibleProperty']

// looping over object
for(let key in obj){
  console.log(key); // visibleProperty
}

Get and Set
The get and set property flags are used to define accessor properties, allowing 
custom getter and setter functions for a property.

const obj = {
  _value: 0
};
Object.defineProperty(obj, 'value', {
    get(){
        return this._value;
    },
    set(newValue) {
        if (newValue >= 0) {
          this._value = newValue;
        } else {
          console.error('Invalid value. Please provide a non-negative number.');
        }
    },
    enumerable:false
});
obj.value = 42;
console.log(obj); // Output: { _value: 42 }

obj.value = -1; // Output: Invalid value. Please provide a non-negative number.

Configurable
 This flag controls whether property can be deleted from the object
 const obj = {};

// Set configurable to false, making the property non-deletable
// Set enumerable to true, allowing the property to show up during enumeration
Object.defineProperty(obj, 'property', {
    value: 'value',
    configurable: false,
    enumerable: true
});

console.log(obj); // { property: 'value' }

// Attempt to delete the 'property' from the object
// Since configurable is set to false, deletion will not succeed
delete obj.property;

console.log(obj); // { property: 'value' }

18>example of promise and async await 
ans:Explain promises and how to use async/await with an example.
A16: Promises represent the eventual completion (or failure) of an 
asynchronous operation. async/await is syntax for handling promises more easily
const myPromise = new Promise((resolve, reject) => {
    setTimeout(() => resolve('Success!'), 1000);
});

myPromise.then(result => console.log(result));

async function fetchData() {
    const result = await myPromise;
    console.log(result);
}
fetchData();

18>what is event delagation and bubbling and capturing ?

ans:Event Delegation is basically a pattern to handle events efficiently. 
Instead of adding an event listener to each and every similar element, 
we can add an event listener to a parent element and call an event on a 
particular target using the .target property of the event object.

Event capturing means propagation of event is done from ancestor elements 
to child element in the DOM 
while event bubbling means propagation is done from child element to ancestor elements in the DOM.
The event capturing occurs followed by event bubbling.
If {capture: true} ,event capturing will occur else event bubbling will occur.
Both can be prevented by using the stopPropagation() method.
