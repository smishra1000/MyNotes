“Inheritance is a mechanism of acquiring features and behaviours of a class 
by another class.”

To understand inheritance, we need to understand about class in JavaScript. 
Classes are the basic concepts of any Object Oriented Programming.
 In JavaScript every function act as class.

For Ex:

function Person(fName, lName) {
  this.firstName = fName;
  this.lastName = lName;
}

A prototype object is the shared space of a class instances. When any property 
of method of class is being accessed, JS interpreter first lookup that property 
in that object if it is not available, then it lookup into its prototype, 
if it is not there, then lookup into its parent’s prototype and so on.

Every object has __proto__ property pronounced as “dunder proto” which holds 
reference of prototype object.

For Ex:

Person.prototype.getFullName = function () {
  return this.firstName + ' ' + this.lastName;
}

method getFullName is created on prototype of Person. When we try to access 
p1.getFullName(), JS engine first try to access that property on that object,
 as it is not available on p1, it goes to __proto__ and try to access that 
 property, once JS engine found getFullName, it execute it in that context.

p1.hasOwnProperty('firstName');  // Returns true
p1.hasOwnProperty('lastName');   // Returns true
p1.hasOwnProperty('getFullName') // Returns false

Create base class

Create Person as base class.

function Person(fName, lName) {
  this.firstName = fName;
  this.lastName = lName;
}

Create methods on prototype of the Person class

Person.prototype.getFullName = function () {
  return this.firstName + ' ' + this.lastName;
}


Create child class

Create Employee class and call its base class with required parameters.

function Employee(fName, lName, eId) {
  Person.call(this, fName, lName);
  this.empId = eId;
}

Inherit prototype object

Create prototype object for Employee class from Person class.

Employee.prototype = Object.create(Person.prototype);
Here we are creating new object from Person.prototype and assigning it to prototype object of Employee class.

We recreated prototype object for Employee class, but here we missed something. What?? We copied prototype from Person class and hence we lost constructor function of Employee class.

Reassign constructor function.

Employee.prototype.constructor = Employee;

Now we are ready to add methods over the prototype of Employee class.

Add methods on prototype of child class

Employee.prototype.getEmpInfo = function () {
  return [this.empId, this.firstName, this.lastName];
}
Now we can create instance of Employee class and can access properties and methods of Person class too from that instance.

var e1 = new Employee('Jhon', 'Doe', 10);
e1.getFullName();
e1.getEmpInfo();