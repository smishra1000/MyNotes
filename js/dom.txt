The Document Object Model, or DOM for short, is a platform and language 
independent model to represent the HTML or XML documents. It defines the 
logical structure of the documents and the way in which they can be accessed 
and manipulated by an application program

In the DOM, all parts of the document, such as elements, attributes, text, etc.
 are organized in a hierarchical tree-like structure

 <!DOCTYPE html>
<html>
<head>
    <title>My Page</title>
</head>
<body>
    <h1>Helllo</h1>
</body>
</html>

Selecting DOM Elements in JavaScript

You can select an element based on its unique ID with the getElementById()
 method. This is the easiest way to find an HTML element in the DOM tree.


<nav>
  <a>Home</a>
  <a>About</a>
  <a>Contact</a>
  <a style="display: none">Pricing</a>
</nav>

Getting content with innerHTML
// Reading content with innerHTML
const navElement = document.querySelector('nav')
console.log(navElement.innerHTML)

 The innerHTML property returns the full content including all the HTML tags 
 inside the nav elements and their text content.

 Getting content with innerText
// Reading content with innerText
const navElement = document.querySelector('nav')
console.log(navElement.innerText)

The innerText property returns the content as rendered on the screen. 
It ignores all the HTML tags. And it also ignores the hidden element 
(with display set to none).


Getting content with textContent
// Reading content with textContent
const navElement = document.querySelector('nav')
console.log(navElement.textContent)

The textContent property returns the content as it in the HTML markup. Like 
innerText, it also ignores the HTML tags. But 
it doesn't consider styles, so it returns the "Pricing" text even though 
it's hidden




What is the innerHTML Property?
When you use the innerHTML property, it reads both the HTML markup and the 
text content of the element. This means when you use it to set the content 
of elements, you can include HTML tags, and the browser will render them 
correctly.

But, be cautious if you're inserting content from user input or any untrusted 
source with innerHTML. Attackers can use the HTML <script> tag to insert and 
run malicious code in your app


What is the innerText Property?
This property focuses on the rendered text content. When you use innerText to
 read the content of an element, it returns the text as it appears on screen.
  It ignores HTML tags. And it also does not include text that is hidden with
   CSS styles.


What is the textContent Property?
The textContent property also ignores all HTML tags and returns only the text. 
Whiles innerText reads text as it is rendered on screen, textContent reads text 
as it is in the markup. It also returns all text, whether it's rendered on screen
 or not.




 The innerHTML property recognizes HTML tags and renders the content according 
 to the tags. innerText and textContent ignore HTML tags and treat them as part 
 of the text. You also learned in this article how innerHTML can lead to security
  risks and why you should be mindful of this.

Also, innerText reads content as it appears on screen, ignores hidden content,
 and observes formatting of text. But textContent reads content as it appears 
 in the markup. This means it reads hidden content too. But it also ignores
  formatting like whitespaces and line breaks when you are using it set content.



  Methods
parentNode.getElementsByClassName() - returns an HTMLCollection
parentNode.getElementsByTagName()   - returns an HTMLCollection
parentNode.getElementsByTagNameNS() - returns an HTMLCollection
  document.getElementsByName()      - returns a NodeList
Properties
parentNode.children   - returns an HTMLCollection
      Node.childNodes - returns a NodeList




Theory
According to MDN documentation:

getElementsByClassName() returns a live HTMLCollection representing an array-like
 object of all child elements which have all of the given class name(s).


querySelectorAll() returns a static (not live) NodeList representing a list of 
the document's elements that match the specified group of selectors.

Hands-on
Let's consider the following HTML structure:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Demo</title>
  </head>
  <body>
    <ul id="list">
      <li class="item">First Item</li>
      <li class="item">Second Item</li>
      <li class="item">Third Item</li>
    </ul>
    <script src="script.js"></script>
  </body>
</html>

//get UL element
const list = document.getElementById('list');

//Get items by class name (two ways)
const itemsByClassName = document.getElementsByClassName('item');
const itemsByQuerySelector = document.querySelectorAll('.item');

console.log('First console log', itemsByClassName, itemsByQuerySelector);

//adding the fourth element
list.innerHTML += `<li class="item">Fourth Item</li>`;

console.log('Second console log', itemsByClassName, itemsByQuerySelector);