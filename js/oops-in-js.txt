Object-Oriented Programming (OOP) is a programming paradigm widely used in software development.
 It involves using objects, which are instances of classes, to organize and 
 structure code

 Classes in JavaScript
In JavaScript, classes are defined using the class keyword. A class is a blueprint for creating objects with properties and methods. Here is an example of a simple class in JavaScript:

class Animal {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  getInfo() {
    return `The name of the animal is ${this.name} and the age is ${this.age}`;
  }
}

Creating Objects/Instances from a Class

const firstAnimal = new Animal("Lion", 7);
console.log(firstAnimal); //Animal {name: "Lion", age: 7}
console.log(firstAnimal.getInfo()); //The name of the animal is Lion and the age i


Inheritance in JavaScript
Inheritance is another important concept in OOP. It allows us to create new 
classes that inherit properties and methods from existing classes and makes 
it possible to extend the parent class by adding more. In JavaScript, we use
 the extends keyword to create a subclass inherited from a superclass

 class Dog extends Animal {
  constructor(name, age, breed) {
    super(name, age);
    this.breed = breed;
  }
  bark() {
    return "Woof";
  }
}
class Cat extends Animal {
  constructor(name, age, weight) {
    super(name, age);
    this.weight = weight;
  }
}

const myDog = new Dog("Snowy", 2, "Fox Terrier");
console.log(myDog.getInfo()); //The name of the animal is Snowy and the age is 2
console.log(myDog.breed); //Fox Terrier
console.log(myDog.bark()); //Woof

const myCat = new Cat("Bob", 5, "3kg");
console.log(myCat.getInfo()); //The name of the animal is Bob and the age is 5
console.log(myCat.weight); //3kg



Encapsulation in JavaScript
Encapsulation is a concept in object-oriented programming that allows us to keep
 the internal details of an object hidden from the outside world, and only expose
  a public interface for interacting with the object.

class Animal {
  constructor(name, age) {
    let _type = 'unknown'; // private variable declared with let
    this.name = name;
    this.age = age;
    this.getType = () => _type; // method to get the private variable
    this.setType = (type) => { _type = type }; // method to set the private variable
  }
  
  getInfo() {
    return `The name of the animal is ${this.name} and the age is ${this.age}`;
  }
}

const myAnimal = new Animal("Lion", 7);
console.log(myAnimal.getInfo());
console.log(myAnimal.getType()); // accessing the private variable
myAnimal.setType('mammal'); // modifying the private variable
console.log(myAnimal.getType()); // accessing the modified private variable

class Animal {
  #_type;

  constructor(name, age, type) {
    this.name = name;
    this.age = age;
    this.#_type = type;
  }

  getInfo() {
    return `The name of the animal is ${this.name} and the age is ${this.age}. The animal type is ${this.#_type}`;
  }
}

const firstAnimal = new Animal("Lion", 7, "Wild");
console.log(firstAnimal.getInfo()); // "The name of the animal is Lion and the age is 7. The animal type is Wild"

const secondAnimal = new Animal("Rex", 2, "Domestic");
console.log(secondAnimal.getInfo()); // "The name of the animal is Rex and the age is 2. The animal type is Domestic"
console.log(secondAnimal.#_type); // SyntaxError: Private field '#_type' must be declared in an enclosing class


Polymorphism in JavaScript
Polymorphism in JavaScript refers to the ability of different objects to respond
 to the same message or method call in different ways. This allows for greater 
 flexibility in code design, as different objects can be treated interchangeably 
 as long as they implement the same methods


 Abstraction in JavaScript
Abstraction in JavaScript is the concept of hiding unnecessary details of an 
object or system and only exposing the essential features that are relevant 
to the current context. This helps to simplify code and reduce complexity, 
making it easier to understand and maintain.

class Animal {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  getInfo() {
    return `The name of the animal is ${this.name} and the age is ${this.age}`;
  }
}