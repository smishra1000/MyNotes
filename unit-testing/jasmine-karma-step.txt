Unit testing is a type of software testing that focuses on individual 
units or components of a software system. The purpose of unit testing is 
to validate that each unit of the software works as intended and meets the requirements


To isolate a section of code.
To verify the correctness of the code.
To test every function and procedure.
To fix bugs early in the development cycle and to save costs.
To help the developers understand the code base and enable them to make changes quickly.
To help with code reuse.


Unit tetsing technology------------------------------------------------------------------

1. JEST – Works with Projects Using Babel, TypeScript, Node.js, React, Angular 
and Vue.js JEST is an open-source JavaScript testing framework created
 and maintained by developers at Facebook 

AVA – Test Runner for Node.js with a Concise API
AVA is a light-weight framework that takes full advantage of JavaScript’s 
asynchronous nature. It runs tests faster and performs them concurrently and
 asynchronously. AVA is majorly implemented to run tests on Node.js-based codes. 

 3. Mocha – A Feature-rich JavaScript Test Framework Running on Node.js and 
 in the Browser
Mocha supports both front-end and back-end testing of JavaScript codes on 
the browser or Chrome engine

4. Karma – Karma is a Test Runner for JavaScript that Runs on Node.js

5. Puppeteer – A Node.js Library Maintained by Chrome’s Development Team from
 Google
Puppeteer is a test execution framework, developed by one of Google’s teams. 
It offers a high-level API to control headless Chrome for Node.js apps. 

6. Jasmine – An Open-source Testing Framework for JavaScript
Jasmine is a behavior-driven development framework for testing JavaScript code



What are Jasmine and Karma?-------------------------------------------------------------
Jasmine is a JavaScript behavior-driven testing framework that helps you write
 test cases in a human-readable way. Simply put, Jasmine allows us to write code
  (test case) that tests our functional code to achieve a specific requirement.

Karma is a test runner that executes the test we write with Jasmine. It also 
provides features like live reloading of test cases, code coverage reporting

How to write a unit test with Jasmine?
To write a unit test, we need to create a spec.ts file or test case file. 
Generally, Angular generates a test case file on its own and provides a basic
 skeleton of the test case. It will follow the below-mentioned structure to 
 write test cases.

 describe(): It is used to group related test cases. It accepts two arguments:
  a string that describes the group of specs(test cases), and a function that 
  contains the specs(test cases) or nested describe statements. 
  It is known as a test group or test suite.

It(): It is used to define a single test spec. It also takes two arguments: 
a test spec description and a function that contains the expectation or 
assertions for the spec.


Expect(): It is used to create an expectation or assertion in a test spec.
 It takes a single argument, which is the value that you want to test, 
 and then a matcher function that tests the value against the expected value.

 beforeEach(): Called before each test specification
beforeAll(): Called once before all the specification
afterEach(): Called after each test specification
afterAll(): Called once after all the specifications.

in the context of unit testing, the terms spy, stub, mock, fake, and dummy 
are used to describe different types of test doubles. These are objects that
 replace real components in tests to isolate the functionality being tested. 
 Each type serves a different purpose and has distinct characteristics. 
 Here's an explanation of each:


 Spy
A spy is a test double that records how a function or method is called. 
It keeps track of various interactions, such as the number of times it was 
called, the arguments it was called with, and the context (this value) in 
which it was called.

const sinon = require('sinon');
const obj = {
  method: (arg) => arg,
};

const spy = sinon.spy(obj, 'method');
obj.method(42);

console.log(spy.calledOnce); // true
console.log(spy.calledWith(42)); // true


Stub
A stub is a test double that replaces a function or method with pre-defined
 behavior. Unlike spies, stubs can control the behavior of the function they 
 replace by returning specific values or throwing exceptions.

 const sinon = require('sinon');
const obj = {
  method: (arg) => arg,
};

const stub = sinon.stub(obj, 'method').returns(42);

console.log(obj.method()); // 42
console.log(stub.calledOnce); // true


Mock
A mock is a type of test double that combines the behavior of both spies 
and stubs. It not only records interactions but also sets expectations 
about how the function or method should be used. Mocks are used to verify
 that the expected interactions happen during the test.

 const sinon = require('sinon');
const obj = {
  method: (arg) => arg,
};

const mock = sinon.mock(obj);
mock.expects('method').once().withExactArgs(42);

obj.method(42);

mock.verify(); // Verifies that the expectations were met

Fake
A fake is a fully functional implementation that is used in place of a 
real component, but it is simpler and suitable only for testing purposes.
 Fakes can have working implementations that are different from the real 
 ones but are adequate for testing scenarios.

Summary
Spy: Records how a function or method is called.
Stub: Replaces a function or method with pre-defined behavior.
Mock: Combines spying and stubbing, with built-in verification of expected interactions.
Fake: A fully functional but simplified version of a real component.
Dummy: An object that is passed around but not used, typically to satisfy method signatures. 


How to run tests------------------------------------------------------------



mkdir math-module
cd math-module
npm init -y

npm install --save-dev jasmine karma karma-jasmine karma-chrome-launcher karma-webpack webpack webpack-cli

create project structure--------------------------------------------------
math-module/
├── src/
│   └── math.js
├── tests/
│   ├── spec/
│   │   └── math.spec.js
│   └── support/
│       └── jasmine.json
├── node_modules/
├── package.json
└── karma.conf.js


Step 1: Create the Source File
src/math.js:

// src/math.js
export const add = (a, b) => a + b;
export const subtract = (a, b) => a - b;
export const multiply = (a, b) => a * b;
const divide = (a, b) => {
  if (b === 0) {
    throw new Error('Division by zero');
  }
  return a / b;
};
export default divide;


Step 2: Create the Test File
tests/spec/math.spec.js:

// tests/spec/math.spec.js
import { add, subtract, multiply } from '../../src/math.js';
import divide from '../../src/math.js';

describe('Math Module', () => {
  describe('add function', () => {
    it('should add two numbers correctly', () => {
      expect(add(2, 3)).toBe(5);
    });

    it('should handle negative numbers correctly', () => {
      expect(add(-2, 3)).toBe(1);
    });
  });

  describe('subtract function', () => {
    it('should subtract two numbers correctly', () => {
      expect(subtract(5, 3)).toBe(2);
    });

    it('should handle negative numbers correctly', () => {
      expect(subtract(2, 5)).toBe(-3);
    });
  });

  describe('multiply function', () => {
    it('should multiply two numbers correctly', () => {
      expect(multiply(2, 3)).toBe(6);
    });

    it('should handle multiplication by zero correctly', () => {
      expect(multiply(2, 0)).toBe(0);
    });
  });

  describe('divide function', () => {
    it('should divide two numbers correctly', () => {
      expect(divide(10, 2)).toBe(5);
    });

    it('should handle division by zero', () => {
      expect(() => divide(10, 0)).toThrowError('Division by zero');
    });
  });
});


Step 3: Create Jasmine Configuration File
tests/support/jasmine.json:

{
  "spec_dir": "tests/spec",
  "spec_files": [
    "**/*[sS]pec.js"
  ],
  "helpers": [
    "helpers/**/*.js"
  ]
}

Step 4: Create the Karma Configuration File
karma.conf.js:

module.exports = function(config) {
  config.set({
    frameworks: ['jasmine'],
    files: [
      'tests/spec/**/*.spec.js'
    ],
    preprocessors: {
      'tests/spec/**/*.spec.js': ['webpack']
    },
    webpack: {
      mode: 'development',
      module: {
        rules: []
      },
      resolve: {
        extensions: ['.js']
      }
    },
    browsers: ['Chrome'],
    singleRun: true,
    reporters: ['progress'],
    plugins: [
      'karma-jasmine',
      'karma-chrome-launcher',
      'karma-webpack',
    ],
  });
};

Step 3: Update package.json

{
  "name": "math-module",
  "version": "1.0.0",
  "description": "",
  "main": "src/math.js",
  "type": "module",
  "scripts": {
    "test": "karma start karma.conf.cjs"
  },
  "devDependencies": {
    "jasmine": "^3.7.1",
    "karma": "^6.3.4",
    "karma-chrome-launcher": "^3.1.0",
    "karma-cli": "^2.0.0",
    "karma-jasmine": "^4.0.1",
    "karma-webpack": "^5.0.0",
    "webpack": "^5.36.2",
    "webpack-cli": "^4.7.2"
  },
  "dependencies": {}
}
By renaming the configuration file to karma.conf.cjs----because karma config file still support common js module

Step 4: Run the Tests
Run the tests using npm:
npm test
