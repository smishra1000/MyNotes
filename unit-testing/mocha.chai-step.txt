Mocha
Mocha is a feature-rich JavaScript test framework that runs on Node.js and in
 the browser, making asynchronous testing simple and fun. Mocha tests run 
 serially, allowing for flexible and accurate reporting while mapping 
 uncaught exceptions to the correct test cases.

Key Features of Mocha:
Flexible: Supports both TDD (Test-Driven Development) and BDD (Behavior-Driven Development) styles.
Asynchronous Testing: Handles asynchronous testing with ease, allowing the use of done() callbacks, promises, and async/await.
Extensible: Provides hooks (before, after, beforeEach, afterEach) for setting up preconditions and cleaning up after tests.
Reporters: Offers various reporters to display test results in different formats.
Chai
Chai is a BDD/TDD assertion library for Node.js and the browser that can be paired with any JavaScript testing framework. Chai provides you with interfaces to easily write readable assertions and tests.

Key Features of Chai:
Assertion Styles: Supports three assertion styles:
Should: should style is chainable and more natural to read.
Expect: expect style is chainable and more function-oriented.
Assert: assert style is the classic TDD style.
Plugins: Easily extensible with plugins like chai-as-promised for promise assertions.

Install Mocha and Chai:
npm install --save-dev mocha chai @babel/register

project structure-----------------------
math-module/
├── src/
│   └── math.js
├── tests/
│   └── math.spec.js
├── node_modules/
├── package.json
└── mocha.config.js

Create the Source File:

src/math.js:
// src/math.js
export const add = (a, b) => a + b;
export const subtract = (a, b) => a - b;
export const multiply = (a, b) => a * b;
export const divide = (a, b) => {
  if (b === 0) {
    throw new Error('Division by zero');
  }
  return a / b;
};

export const filterByAge = (arr, age) => arr.filter(item => item.age > age);

Create the Test File:

tests/math.spec.js:

// tests/math.spec.js
import { expect } from 'chai';
import { add, subtract, multiply, divide, filterByAge } from '../src/math.js';

describe('Math Module', () => {
  describe('add function', () => {
    it('should add two numbers correctly', () => {
      expect(add(2, 3)).to.equal(5);
    });

    it('should handle negative numbers correctly', () => {
      expect(add(-2, 3)).to.equal(1);
    });
  });

  describe('subtract function', () => {
    it('should subtract two numbers correctly', () => {
      expect(subtract(5, 3)).to.equal(2);
    });

    it('should handle negative numbers correctly', () => {
      expect(subtract(2, 5)).to.equal(-3);
    });
  });

  describe('multiply function', () => {
    it('should multiply two numbers correctly', () => {
      expect(multiply(2, 3)).to.equal(6);
    });

    it('should handle multiplication by zero correctly', () => {
      expect(multiply(2, 0)).to.equal(0);
    });
  });

  describe('divide function', () => {
    it('should divide two numbers correctly', () => {
      expect(divide(10, 2)).to.equal(5);
    });

    it('should handle division by zero', () => {
      expect(() => divide(10, 0)).to.throw('Division by zero');
    });
  });

  describe('filterByAge function', () => {
    const people = [
      { name: 'John', age: 25 },
      { name: 'Jane', age: 20 },
      { name: 'Jim', age: 30 },
      { name: 'Jack', age: 18 }
    ];

    it('should filter people older than a given age', () => {
      const result = filterByAge(people, 20);
      expect(result).to.deep.equal([
        { name: 'John', age: 25 },
        { name: 'Jim', age: 30 }
      ]);
    });

    it('should return an empty array if no one is older than the given age', () => {
      const result = filterByAge(people, 35);
      expect(result).to.deep.equal([]);
    });

    it('should not include people exactly the given age', () => {
      const result = filterByAge(people, 20);
      expect(result).to.not.deep.include({ name: 'Jane', age: 20 });
    });
  });
});


mocha.config.js:

export default {
  require: '@babel/register',
  recursive: true,
  spec: 'tests/**/*.spec.js', // specify the test files pattern
};



Create pakage.json 
{
  "name": "math-module",
  "version": "1.0.0",
  "description": "",
  "main": "src/math.js",
  "type": "module",
  "scripts": {
    "test": "mocha --config mocha.config.js"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.1.3",
    "@babel/register": "^7.14.5"
  },
  "dependencies": {}
}


Run the Tests:

Run the tests using npm:

npm test